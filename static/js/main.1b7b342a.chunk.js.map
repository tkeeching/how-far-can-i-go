{"version":3,"sources":["components/Header.tsx","components/SearchControl.js","components/LeafletMap.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","Title","styled","h1","SearchControl","GeoSearchControl","provider","OpenStreetMapProvider","style","searchLabel","this","props","autoClose","retainZoomLevel","classNames","input","MapControl","LeafletMap","useState","center","coordinates","setCoordinates","mapRef","useRef","SearchBar","withLeaflet","useEffect","current","leafletElement","on","e","newCoordinates","length","splice","push","location","y","x","StyledMap","zoom","ref","TileLayer","url","attribution","map","pos","index","Marker","position","key","Circle","color","radius","Map","App","AppContainer","div","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oVAGA,IAEeA,EAFU,kBAAM,kBAACC,EAAD,2BAIzBA,EAAQC,IAAOC,GAAV,K,uGCWIC,E,qLAbX,OAAOC,YAAiB,CACtBC,SAAU,IAAIC,IACdC,MAAO,MACPC,YAAY,GAAD,OAAKC,KAAKC,MAAMF,aAC3BG,WAAW,EACXC,iBAAiB,EACjBC,WAAY,CACVC,MAAO,e,GATaC,K,2HCG5B,IAoDeC,EApDI,WAAO,IAAD,EACKC,mBAAS,EAAE,WAAY,cAD5B,mBAChBC,EADgB,aAEeD,mBAAS,KAFxB,mBAEhBE,EAFgB,KAEHC,EAFG,KAIjBC,EAASC,iBAAO,MAChBC,EAAYC,YAAYrB,GAkB9B,OAhBAsB,qBAAU,WACIJ,EAAOK,QAAQC,eAGvBC,GAAG,0BAA0B,SAACC,GAChC,IAAMC,EAAc,YAAOX,GACvBW,EAAeC,OAAS,GAG1BD,EAAeE,OAAO,EAAG,GAFzBF,EAAeG,KAAK,CAACJ,EAAEK,SAASC,EAAGN,EAAEK,SAASE,IAKhDhB,EAAeU,QAEhB,CAACX,IAGF,kBAACkB,EAAD,CAAWnB,OAAQA,EAAQoB,KAAM,GAAIC,IAAKlB,GACxC,kBAACE,EAAD,CACEf,YACyB,IAAvBW,EAAYY,OACR,uBACA,sBAGR,kBAACS,EAAA,EAAD,CACEC,IAAK,qDACLC,YACE,uFAGHvB,EAAYwB,KAAI,SAACC,EAAKC,GAAN,OACf,kBAACC,EAAA,EAAD,CAAQC,SAAUH,EAAKI,IAAKH,GAC1B,kBAACI,EAAA,EAAD,CACE/B,OAAQ0B,EACRM,MAAiB,IAAVL,EAAc,OAAS,QAC9BM,OAxCK,KAyCLH,IAAKH,UAUXR,EAAYpC,YAAOmD,IAAPnD,CAAH,K,sICtDf,IASeoD,EATO,WACpB,OACE,kBAACC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QAOAA,EAAerD,IAAOsD,IAAV,KCLEC,QACW,cAA7BC,OAAOvB,SAASwB,UAEe,UAA7BD,OAAOvB,SAASwB,UAEhBD,OAAOvB,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1b7b342a.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Header: React.FC = () => <Title>How far can I go?</Title>;\n\nexport default Header;\n\nconst Title = styled.h1`\n  text-align: center;\n`","import { MapControl } from \"react-leaflet\";\nimport { GeoSearchControl, OpenStreetMapProvider } from \"leaflet-geosearch\";\n\nclass SearchControl extends MapControl {\n  createLeafletElement() {\n    return GeoSearchControl({\n      provider: new OpenStreetMapProvider(),\n      style: \"bar\",\n      searchLabel: `${this.props.searchLabel}`,\n      autoClose: true,\n      retainZoomLevel: true,\n      classNames: {\n        input: \"input\",\n      },\n    });\n  }\n}\n\nexport default SearchControl;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { Map, Marker, TileLayer, Circle, withLeaflet } from \"react-leaflet\";\n\nimport SearchControl from \"./SearchControl\";\n\nconst LeafletMap = () => {\n  const [center, setCenter] = useState([-37.8047962, 144.9413828]);\n  const [coordinates, setCoordinates] = useState([]);\n  const radius = 25000; // unit in meters\n  const mapRef = useRef(null);\n  const SearchBar = withLeaflet(SearchControl);\n\n  useEffect(() => {\n    const map = mapRef.current.leafletElement;\n\n    // Retrieve coordinates of selected location\n    map.on(\"geosearch/showlocation\", (e) => {\n      const newCoordinates = [...coordinates];\n      if (newCoordinates.length < 2) {\n        newCoordinates.push([e.location.y, e.location.x]);\n      } else {\n        newCoordinates.splice(0, 2);\n        newCoordinates.push([e.location.y, e.location.x]);\n      }\n      setCoordinates(newCoordinates);\n    });\n  }, [coordinates]);\n\n  return (\n    <StyledMap center={center} zoom={10} ref={mapRef}>\n      <SearchBar\n        searchLabel={\n          coordinates.length === 1\n            ? \"Where are you going?\"\n            : \"Where do you live\"\n        }\n      />\n      <TileLayer\n        url={\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\n        attribution={\n          \"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n        }\n      />\n      {coordinates.map((pos, index) => (\n        <Marker position={pos} key={index}>\n          <Circle\n            center={pos}\n            color={index === 0 ? \"blue\" : \"green\"}\n            radius={radius}\n            key={index}\n          />\n        </Marker>\n      ))}\n    </StyledMap>\n  );\n};\n\nexport default LeafletMap;\n\nconst StyledMap = styled(Map)`\n  margin: 0 auto;\n  width: 100%;\n  height: 100%;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Header from \"./components/Header\";\nimport LeafletMap from \"./components/LeafletMap\";\n\nconst App: React.FC = () => {\n  return (\n    <AppContainer>\n      <Header />\n      <LeafletMap />\n    </AppContainer>\n  );\n};\n\nexport default App;\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}